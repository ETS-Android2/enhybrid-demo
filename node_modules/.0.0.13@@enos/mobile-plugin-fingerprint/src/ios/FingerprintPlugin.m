//
//  FingerprintPlugin.m
//  Copyright (c) 2014 Lee Crossley - http://ilee.co.uk
//

#import "FingerprintPlugin.h"

#import <LocalAuthentication/LocalAuthentication.h>

static const int FINGERPRINT_SUCCESS = 0;
static const int FINGERPRINT_USER_CANCELED = 1;
static const int FINGERPRINT_USER_PASSWORD = 2;
static const int FINGERPRINT_ERROR_LOCKOUT = 3;
static const int FINGERPRINT_ERROR_NOT_SUPPORT = 4;

static const int FINGERPRINT_AVAILABLE_NOT_SUPPORT = 0;
static const int FINGERPRINT_AVAILABLE_SUPPORT = 1;

@implementation FingerprintPlugin

- (void) authenticate:(CDVInvokedUrlCommand*)command;
{
    NSString *text = [command.arguments objectAtIndex:0];

    __block CDVPluginResult* pluginResult = nil;

    if (NSClassFromString(@"LAContext") != nil)
    {
        LAContext *laContext = [[LAContext alloc] init];
        NSError *authError = nil;

        if ([laContext canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&authError])
        {
            [laContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:text reply:^(BOOL success, NSError *error)
             {
                 if (success)
                 {
                     pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_SUCCESS];

                 }
                 else
                 {
                     int errorCode;
                     switch (error.code) {
                         // 用户未提供有效证书,(3次机会失败 --身份验证失败)。
                         case LAErrorAuthenticationFailed:
                             errorCode = FINGERPRINT_ERROR_LOCKOUT;
                             break;
                         // 认证被取消,(用户点击取消按钮)。
                         case LAErrorUserCancel:
                             errorCode = FINGERPRINT_USER_CANCELED;
                             break;
                         // 认证被取消,用户点击回退按钮(输入密码)。
                         case LAErrorUserFallback:
                             errorCode = FINGERPRINT_USER_PASSWORD;
                             break;
                         // 身份验证被系统取消,(比如另一个应用程序去前台,切换到其他 APP)。
                         case LAErrorSystemCancel:
                             errorCode = FINGERPRINT_USER_CANCELED;
                             break;
                         // 身份验证无法启动,因为密码在设备上没有设置。
                         case LAErrorPasscodeNotSet:
                             errorCode = FINGERPRINT_ERROR_NOT_SUPPORT;
                             break;
                         // 身份验证无法启动,因为触摸ID在设备上不可用。
                         case LAErrorTouchIDNotAvailable:
                             errorCode = FINGERPRINT_ERROR_NOT_SUPPORT;
                             break;
                         // 身份验证无法启动,因为没有登记的手指触摸ID。 没有设置指纹密码时。
                         case LAErrorTouchIDNotEnrolled:
                             errorCode = FINGERPRINT_ERROR_NOT_SUPPORT;
                             break;
                         default:
                         // 其他错误
                             errorCode = FINGERPRINT_ERROR_LOCKOUT;
                             break;
                     }
                     
                     pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: errorCode];
                 }
                 [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
             }];
        }
        else
        {
            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_ERROR_NOT_SUPPORT];
            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
        }
    }
    else
    {
        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_ERROR_NOT_SUPPORT];
        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
    }
}

- (void) isAvailable:(CDVInvokedUrlCommand*)command;
{

    __block CDVPluginResult* pluginResult = nil;

    if (NSClassFromString(@"LAContext") != nil)
    {
        // LAContext *laContext = [[LAContext alloc] init];
        // NSError *authError = nil;
         BOOL can  = [command argumentAtIndex:0];

        if (can)
        {
            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_AVAILABLE_SUPPORT];
        }
        else
        {
            pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_AVAILABLE_NOT_SUPPORT];
        }
    }
    else
    {
        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsInt: FINGERPRINT_AVAILABLE_NOT_SUPPORT];
    }

    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
}

@end
