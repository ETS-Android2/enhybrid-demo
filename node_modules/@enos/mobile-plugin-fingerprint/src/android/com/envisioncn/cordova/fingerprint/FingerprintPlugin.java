package com.envisioncn.cordova.fingerprint;

import android.app.Dialog;
import android.content.DialogInterface;
import android.hardware.fingerprint.FingerprintManager;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;

import ${PACKAGE_NAME}.R;

public class FingerprintPlugin extends CordovaPlugin {
    private static final String TAG = "FingerprintAuth";
    public static final int FINGERPRINT_SUCCESS = 0;
    public static final int FINGERPRINT_USER_CANCELED = 1;
    public static final int FINGERPRINT_USER_PASSWORD = 2;
    public static final int FINGERPRINT_ERROR_LOCKOUT = 3;
    public static final int FINGERPRINT_ERROR_NOT_SUPPORT = 4;

    public static final int FINGERPRINT_AVAILABLE_NOT_SUPPORT = 0;
    public static final int FINGERPRINT_AVAILABLE_SUPPORT = 1;

    private FingerprintDialog mFingerprintDialog = null;

    @Override
    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
        FingerprintHelper.init(this.cordova.getContext());
    }

    /**
     * Executes the request and returns PluginResult.
     *
     * @param action          The action to execute.
     * @param data            JSONArray of arguments for the plugin.
     * @param callbackContext The callback context used when calling back into JavaScript.
     * @return True when the action was valid, false otherwise.
     */
    @Override
    public boolean execute(String action, final JSONArray data,
                           final CallbackContext callbackContext) throws JSONException {
        /*
         * Don't run any of these if the current activity is finishing
         * in order to avoid android.view.WindowManager$BadTokenException
         * crashing the app. Just return true here since false should only
         * be returned in the event of an invalid action.
         */
        if (this.cordova.getActivity().isFinishing()) return true;
        if (action.equals("isAvailable")) {
            callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, FingerprintHelper.isAvailable() ? FINGERPRINT_AVAILABLE_SUPPORT : FINGERPRINT_AVAILABLE_NOT_SUPPORT));
        } else if (action.equals("authenticate")) {
            cordova.getActivity().runOnUiThread(new Runnable() {
                public void run() {
                    try {
                        FingerprintHelper.authenticate(new FingerprintHelper.FingerPrintResult() {

                            @Override
                            public void success() {
                                mFingerprintDialog.dismiss();
                                callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, FINGERPRINT_SUCCESS));
                            }

                            @Override
                            public void error(int code, CharSequence info) {
                                mFingerprintDialog.dismiss();
                                if (code == -1) {
                                    callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, FINGERPRINT_ERROR_NOT_SUPPORT));
                                } else {
                                    callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, FINGERPRINT_ERROR_LOCKOUT));
                                }
                            }

                            @Override
                            public void retry(int code, CharSequence info) {
                                if (code == FingerprintManager.FINGERPRINT_ACQUIRED_GOOD) {
                                    mFingerprintDialog.changeMode(1);
                                }
                            }
                        });
                        if (mFingerprintDialog == null) {
                            mFingerprintDialog = new FingerprintDialog(cordova.getContext(), R.style.EnosFingerprintDialog, "");
                        }
                        mFingerprintDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                            @Override
                            public void onDismiss(DialogInterface dialog) {
                                FingerprintHelper.cancelCallback();
                            }
                        });
                        mFingerprintDialog.setCancelListener(new FingerprintDialog.OnBtnListener() {
                            @Override
                            public void onClick(Dialog dialog) {
                                mFingerprintDialog.dismiss();
                                callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, FINGERPRINT_USER_CANCELED));
                            }
                        });
                        mFingerprintDialog.setSubmitListener(new FingerprintDialog.OnBtnListener() {
                            @Override
                            public void onClick(Dialog dialog) {
                                mFingerprintDialog.dismiss();
                                callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, FINGERPRINT_USER_PASSWORD));
                            }
                        });
                        mFingerprintDialog.setContent(data.getString(0));
                        mFingerprintDialog.show();
                        mFingerprintDialog.changeMode(0);
                    } catch (Exception e) {
                    	callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, FINGERPRINT_ERROR_NOT_SUPPORT));

                    }
                }
            });
        }
        return true;
    }
}
