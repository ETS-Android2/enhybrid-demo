package com.envisioncn.cordova.language;

import android.app.Activity;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;

import java.util.Locale;

public class SwitchLanguagePlugin extends CordovaPlugin {
    private static final String TAG = "SwitchLanguagePlugin";

    /**
     * Executes the request and returns PluginResult.
     *
     * @param action            The action to execute.
     * @param data              JSONArray of arguments for the plugin.
     * @param callbackContext   The callback context used when calling back into JavaScript.
     * @return                  True when the action was valid, false otherwise.
     */
    @Override
    public boolean execute(String action, JSONArray data,
                           CallbackContext callbackContext) throws JSONException {
        /*
    	 * Don't run any of these if the current activity is finishing
    	 * in order to avoid android.view.WindowManager$BadTokenException
    	 * crashing the app. Just return true here since false should only
    	 * be returned in the event of an invalid action.
    	 */
        if(this.cordova.getActivity().isFinishing()) return true;
        else if (action.equals("switchLanguage")) {
            this.switchLanguage(data, callbackContext);
        }
        // Only alert and confirm are async.
        callbackContext.success();
        return true;
    }
    
    private void switchLanguage(final JSONArray data, CallbackContext callbackContext){
        final Activity activity = this.cordova.getActivity();
        activity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if(data != null){
                    try {
                        String languageValue = data.get(0).toString();
                        Locale language;
                        if (languageValue.contains("en")) {
                            language = LocaleManager.LOCALE_ENGLISH;
                        }else{
                            language = LocaleManager.LOCALE_CHINESE;
                        }
                        LocaleManager.updateLocale(activity, language);
                        // SWITCHLANGUAGE START
                        // SWITCHLANGUAGE END
                    } catch (Exception e) {
                    }
                }
            }
        });
        callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK));
    }
}
