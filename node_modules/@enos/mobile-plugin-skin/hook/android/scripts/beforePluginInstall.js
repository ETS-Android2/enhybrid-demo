#!/usr/bin/env node

module.exports = function(ctx) {
  var shell = require('shelljs');
  var path = require('path');
  var fs = require('fs-extra');
  var ConfigParser = ctx.requireCordovaModule('cordova-common').ConfigParser,  
      config = new ConfigParser(path.join(ctx.opts.projectRoot, "config.xml")), 
      packageName = config.android_packageName() || config.packageName();

  try {
    var lightResFileToCP = path.join(ctx.opts.projectRoot, '/plugins/mobile-plugin-skin/src/android/res-light/values/colors.xml');
    var lightResDir = path.join(ctx.opts.projectRoot, '/platforms/android/app/src/main/res-light/values');        
    shell.mkdir(path.join(ctx.opts.projectRoot, '/platforms/android/app/src/main/res-light'));
    shell.mkdir(path.join(ctx.opts.projectRoot, '/platforms/android/app/src/main/res-light/values'));
    shell.cp('-R', lightResFileToCP, lightResDir);

    var envApplicationToEditor = path.join(ctx.opts.projectRoot, '/platforms/android/app/src/main/java/com/envisioncn/cordova/hybridInit/EnvApplication.java');
    writeAlternativeContentSync(fs, envApplicationToEditor, /(\/\/ IMPORT START)([\s\S]*\/\/ IMPORT END)/, 'import', 'import skin.support.SkinCompatManager;');
    writeAlternativeContentSync(fs, envApplicationToEditor, /(\/\/ ONCREATE START)([\s\S]*\/\/ ONCREATE END)/, 'oncreate', 'SkinCompatManager.withoutActivity(this).setSkinStatusBarColorEnable(true).setSkinWindowBackgroundEnable(false).loadSkin();');
    var baseWebViewActivityToEditor = path.join(ctx.opts.projectRoot, '/platforms/android/app/src/main/java/com/envisioncn/cordova/webContainer/EnvBaseWebViewActivity.java');
    writeAlternativeContentSync(fs, baseWebViewActivityToEditor, /(\/\/ IMPORT START)([\s\S]*\/\/ IMPORT END)/, 'import', 'import com.envisioncn.cordova.skin.AppSkinHandler;');
    writeAlternativeContentSync(fs, baseWebViewActivityToEditor, /(\/\/ ADD COOKIES START)([\s\S]*\/\/ ADD COOKIES END)/, 'add cookies', 'AppSkinHandler skinOpHandler = new AppSkinHandler(this);\nCookieSyncUtils.syncCookie(this, url, skinOpHandler.getSkinCookie());');
    var buildGradleToEditor = path.join(ctx.opts.projectRoot, '/platforms/android/app/build.gradle');
    writeAlternativeContentSync(fs, buildGradleToEditor, /(\/\/ SOURCESETS START)([\s\S]*\/\/ SOURCESETS END)/, 'sourcesets', 'sourceSets { main { res.srcDirs = [\'src/main/res\', \'src/main/res-light\'] } }');
  } catch (err) {
  }
}

function writeAlternativeContentSync(fs, file, regularStr, key, content){
  var addContent = '// mobile-plugin-skin ' + key + ' start\n' + content + '\n// mobile-plugin-skin ' + key + ' end'
  var readFileData = fs.readFileSync(file, 'utf8');
  readFileData = readFileData.replace(regularStr, '$1\n' + addContent + '    $2');
  fs.writeFileSync(file, readFileData);
}
